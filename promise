userPermissions = [];
userData = {};
pageSettings = {}

connectedCallback() {
	Promise.all([
	    getUserPermissions(),
	    getUserData(),
	    getPageSettings()
	]).then(([userPermissions, userData, pageSettings]) => {
	    this.userPermissions = userPermissions;
	    this.userData = userData;
	    this.pageSettings = pageSettings;
	}).catch(err => {
	    console.error(error);
	}).finally(() => {
	    this.isLoading = false;
	});
}



or




const promiseA = new Promise((resolve, reject) => setTimeout(() => reject('promiseA something happened'), 200));

const promiseB = new Promise((resolve, reject) => setTimeout(() => resolve('promiseB works!'), 300));

const promiseC = new Promise((resolve, reject) => setTimeout(() => reject('promiseC something happend'), 250));

// Promise.allSettled() [...] takes an iterable of promises as input
// it can be an array of promisses [promiseA, promiseB, promiseC];
// and returns a single Promise
// single promise can be resolved with then or async/await

// then
Promise.allSettled([promiseA(), promiseB(), promiseC()])
    .then(results => {
        results.forEach(result => console.log(result));
    });

// or async/await
const results = await Promise.allSettled([promiseA(), promiseB(), promiseC()]);
results.forEach(result => console.log(result));
